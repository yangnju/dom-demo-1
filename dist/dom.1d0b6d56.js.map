{"version":3,"sources":["dom.js"],"names":["window","dom","find","selector","scope","document","querySelectorAll","style","node","name","value","arguments","length","Object","object","key","each","nodeList","fn","i","call"],"mappings":"AAAAA,MAAM,CAACC,GAAP,GAAa;AACTC,EAAAA,IADS,gBACJC,QADI,EACMC,KADN,EACY;AAAG;AACpB,WAAO,CAACA,KAAK,IAAIC,QAAV,EAAoBC,gBAApB,CAAqCH,QAArC,CAAP,CADiB,CACsC;AACxD,GAHM;AAITI,EAAAA,KAJS,iBAIHC,IAJG,EAIGC,IAJH,EAISC,KAJT,EAIe;AACpB,QAAGC,SAAS,CAACC,MAAV,KAAmB,CAAtB,EAAwB;AAAG;AAC3BJ,MAAAA,IAAI,CAACD,KAAL,CAAWE,IAAX,IAAmBC,KAAnB;AACC,KAFD,MAEM,IAAGC,SAAS,CAACC,MAAV,KAAmB,CAAtB,EAAwB;AAC9B,UAAG,OAAOH,IAAP,KAAgB,QAAnB,EAA4B;AAAG;AAC3B,eAAOD,IAAI,CAACD,KAAL,CAAWE,IAAX,CAAP,CADwB,CACC;AAC5B,OAFD,MAEM,IAAGA,IAAI,YAAYI,MAAnB,EAA0B;AAAG;AAC/B,YAAMC,MAAM,GAAGL,IAAf;;AACA,aAAI,IAAIM,GAAR,IAAeD,MAAf,EAAsB;AAAG;AACzBN,UAAAA,IAAI,CAACD,KAAL,CAAWQ,GAAX,IAAkBD,MAAM,CAACC,GAAD,CAAxB,CADsB,CACS;AAC9B;AACJ;AACA;AACJ,GAjBQ;AAkBTC,EAAAA,IAlBS,gBAkBJC,QAlBI,EAkBMC,EAlBN,EAkBS;AACd,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,QAAQ,CAACL,MAAvB,EAA8BO,CAAC,EAA/B,EAAkC;AAChCD,MAAAA,EAAE,CAACE,IAAH,CAAQ,IAAR,EAAcH,QAAQ,CAACE,CAAD,CAAtB;AACD;AACF;AAtBM,CAAb","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    find(selector, scope){  //传入选择器，范围\r\n        return (scope || document).querySelectorAll(selector)  //如果有scope，就在scope里寻找selector，如果没有，就在document里寻找selector\r\n      },\r\n    style(node, name, value){\r\n        if(arguments.length===3){  //如果有三个参数，比如：dom.style(div, 'color', 'red')\r\n        node.style[name] = value\r\n        }else if(arguments.length===2){   \r\n        if(typeof name === 'string'){  //两个参数时，name的类型是字符串。比如dom.style(div, 'color')\r\n            return node.style[name]  //返回name这个属性的值\r\n        }else if(name instanceof Object){  //两个参数时，如果name的类型是对象，比如 dom.style(div, {color: 'red'})\r\n            const object = name\r\n            for(let key in object){  //取到object里所有的key值，比如color，border\r\n            node.style[key] = object[key]  //将输入的属性值赋值给node\r\n            }\r\n        }\r\n        }\r\n    },\r\n    each(nodeList, fn){\r\n        for(let i=0;i<nodeList.length;i++){\r\n          fn.call(null, nodeList[i])\r\n        }\r\n      },\r\n}"]}